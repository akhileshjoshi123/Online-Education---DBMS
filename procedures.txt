/* PROCEDURE FOR FINDING STUDENTS WHO HAVE MORE THAN 9 CREDIT HOURS */

create or replace procedure stud_credit(e out varchar2)
IS
CURSOR C IS 
SELECT S.FNAME AS FIRST_NAME , S.LNAME AS LAST_NAME
FROM STUDENT S
WHERE STUDENT_ID IN (
SELECT SCR.STUDENT_ID AS STUD_ID 
FROM COURSE C,STUD_CSR_REGISTRATION SCR
WHERE  SCR.COURSE_ID=C.COURSE_ID 
group by SCR.STUDENT_ID
HAVING sum(C.CREDITHOURS) > 9 ) ;

CUR_ROW C%ROWTYPE;



BEGIN
IF NOT C%ISOPEN THEN OPEN C;
END IF;
DBMS_OUTPUT.PUT_LINE('PROCEDURE FOR FINDING STUDENTS WHO HAVE MORE THAN 9 CREDIT HOURS' );
DBMS_OUTPUT.PUT_LINE(chr(10));
DBMS_OUTPUT.PUT_LINE('LIST OF STUDENT(S) IS AS FOLLOWING' );
LOOP
FETCH C INTO CUR_ROW;
EXIT WHEN C%NOTFOUND;

DBMS_OUTPUT.PUT_LINE( CUR_ROW.FIRST_NAME || '  ' || CUR_ROW.LAST_NAME );

END LOOP;

exception
when others then
e := SQLERRM;

END ;

/

create or replace procedure UPDATE_CREDIT(e out varchar2)
IS
BEGIN
UPDATE COURSE SET  CREDITHOURS = 9
WHERE COURSE_ID IN
(SELECT COURSE_ID
FROM STUD_CSR_REGISTRATION SCR
WHERE SCR.STUDENT_ID IN
(
SELECT SCR.STUDENT_ID AS STUD_ID 
FROM COURSE C,STUD_CSR_REGISTRATION SCR
WHERE  SCR.COURSE_ID=C.COURSE_ID 
group by SCR.STUDENT_ID
HAVING sum(C.CREDITHOURS) > 9));

COMMIT;

DBMS_OUTPUT.PUT_LINE(chr(10));
DBMS_OUTPUT.PUT_LINE('PROCEDURE FOR UPDATING CREDIT HOURS' );
DBMS_OUTPUT.PUT_LINE(chr(10) );
DBMS_OUTPUT.PUT_LINE('STUDENTS WHO GOT MORE THAN 9 CREDIT HOURS ARE RESTRICTED TO 9 CREDIT HOURS' );


exception
when others then
e := SQLERRM;

END ;


/


SET SERVEROUTPUT ON;
DECLARE
ERROR VARCHAR2(2000);
BEGIN
STUD_CREDIT(ERROR);
UPDATE_CREDIT(ERROR);
IF ERROR IS NULL THEN
DBMS_OUTPUT.PUT_LINE('NO ERROR ENCOUNTERED IN PROCESSING');
ELSE
DBMS_OUTPUT.PUT_LINE('ERROR MESSAGE : ' || ERROR);
END IF;
END;


create or replace PROCEDURE STUDENT_MARKS AS
CURSOR STUDENTLIST IS
SELECT FNAME,LNAME,MARKS,EXAM_DATE FROM 
STUDENT,STUDENT_EXAM,EXAM_SCHEDULE
WHERE STUDENT.STUDENT_ID=STUDENT_EXAM.STUDENT_ID AND
STUDENT_EXAM.EXAM_ID=EXAM_SCHEDULE.EXAM_ID AND MARKS>50 
AND EXAM_DATE='01-NOV-16';
STUDENT_DATA STUDENTLIST%ROWTYPE; 
begin
open STUDENTLIST;
loop
fetch STUDENTLIST into STUDENT_DATA;
exit when STUDENTLIST%NOTFOUND;
DBMS_OUTPUT.PUT_LINE ('STUDENT:'|| STUDENT_DATA.FNAME||' '||STUDENT_DATA.LNAME||' has marks '|| STUDENT_DATA.MARKS ||' who has given exam on '|| STUDENT_DATA.EXAM_DATE );
end loop; 
close STUDENTLIST;
end;
/
Begin 
STUDENT_MARKS();
End